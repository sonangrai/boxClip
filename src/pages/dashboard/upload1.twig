{% extends '../../layout/_layoutSidebar.twig' %} {% block title %} Upload Step 1
- Boxclip {% endblock %} {% block javascripts %} {% endblock %} {% block
contents %}
<div class="uploadPage">
  {% include "./components/_header.twig" %}

  <div class="timelineUpload">
    <div class="linear">
      <div class="stage passed">
        <div class="circle">
          <span>Upload</span>
        </div>
      </div>
      <div class="stage">
        <div class="circle">
          <span>Meta</span>
        </div>
      </div>
      <div class="stage">
        <div class="circle">
          <span>Privacy</span>
        </div>
      </div>
      <div class="stage">
        <div class="circle">
          <span>Publish</span>
        </div>
      </div>
    </div>
  </div>

  <div class="uploadDrop">
    <form class="contents">
      <label for="video">
        <svg
          width="48"
          height="48"
          viewBox="0 0 48 48"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <circle cx="24" cy="24" r="24" fill="#437CC8" />
          <path
            d="M23.5 14L16 32.29L16.71 33L23.5 30L30.29 33L31 32.29L23.5 14Z"
            fill="white"
          />
        </svg>

        <input type="file" id="video" accept="video/*" />
      </label>
      <div class="prompt">
        <strong>Drag Videos to upload or Browse </strong>
        <span>by clicking anywhere inside the box</span>
      </div>
    </form>
  </div>
</div>

<script>
  (function () {
    document.querySelectorAll("#video").forEach((inputElement) => {
      const dropZoneElement = inputElement.closest(".uploadDrop");

      dropZoneElement.addEventListener("click", (e) => {
        inputElement.click();
      });

      inputElement.addEventListener("change", (e) => {
        if (inputElement.files.length) {
          updateThumbnail(dropZoneElement, inputElement.files[0]);
        }
      });

      dropZoneElement.addEventListener("dragover", (e) => {
        e.preventDefault();
        dropZoneElement.classList.add("dragged");
      });

      ["dragleave", "dragend"].forEach((type) => {
        dropZoneElement.addEventListener(type, (e) => {
          dropZoneElement.classList.remove("dragged");
        });
      });

      dropZoneElement.addEventListener("drop", (e) => {
        e.preventDefault();

        if (e.dataTransfer.files.length) {
          inputElement.files = e.dataTransfer.files;
          updateThumbnail(dropZoneElement, e.dataTransfer.files[0]);
        }

        dropZoneElement.classList.remove("dragged");
      });
    });

    /**
     * Updates the thumbnail on a drop zone element.
     *
     * @param {HTMLElement} dropZoneElement
     * @param {File} file
     */
    function updateThumbnail(dropZoneElement, file) {
      let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");

      // First time - remove the prompt
      if (dropZoneElement.querySelector(".prompt")) {
        dropZoneElement.querySelector(".prompt").remove();
      }

      // First time - there is no thumbnail element, so lets create it
      if (!thumbnailElement) {
        thumbnailElement = document.createElement("div");
        thumbnailElement.classList.add("videoName");
        document
          .querySelector(".uploadDrop .contents")
          .appendChild(thumbnailElement);
      }

      thumbnailElement.innerHTML = file.name;
    }
  })();
</script>

{% endblock %}
